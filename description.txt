In this project, we intend to create a simple expression evaluator that takes a pseudo expression and calculate it in recursive form (Scheme format), by using the algorithm infix->prefix. We first ensured that we had a sufficient amount of operators, besides the built-in operators like +, -, *, /, expt, etc, by defining a variety of additional operators so that they work in this program (such as xsin, xcos, xlog, etc). Then we generated an infix->prefix function so that the pseudo form would be converted to Scheme recursive form. Then we use prefix-char-math to evaluate the final list.

During the process of creating this Expression Evaluator, we ran into several problems. Foremost, the process of “tokenizing” the expressions took a great deal of time, since we decided to use list form and not string form in our approach, as instructed in class. The make-math function proved to be more concise than the tokenizer function used in class. The defining process of operators could have been harder, if we had decided to go with string form. One of the trickiest part was the infix->prefix function, but fortunately we benefited from the in-class materials so we did not have to construct it.

Nevertheless, we still could not get to some certain parts. Most importantly, we tried to implement the read-line command, but the list format we used prevented us from doing so. Besides, the derivative function did not work with the evaluator, since the evaluator only takes in numerical values and not variables, so we had to leave this part out. Same reason explains why we could not implement variable-assigning procedure into the program. Nonetheless, this will take much more time and effort; so we decide that we will save these intentions and develop the project further in the future.
